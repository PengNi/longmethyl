/*
========================================================================================
    longmethyl Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
    learn from nf-core and nanome
*/

// Global default params, used in configs
params {

    // from nanome
    conda_base_dir             = null  // sample: /opt/conda
    conda_name                 = null  // sample: opt/conda/envs/longmethyl
    conda_cache = 'local_conda_cache'

    docker_name                = "nipengcsu/longmethyl:0.2"
    singularity_name           = "docker://nipengcsu/longmethyl:0.2"
    singularity_cache          = 'local_singularity_cache'

    gpu                        = false
    containerOptions = null // or "--gpus all" for docker

    // Specify your pipeline's command line flags
    // Input options
    input                      = null
    dsname                     = "test"
    outdir                     = "longmethyl_results"
    help                       = false

    // References
    genome                     = "GRCh38" // could use igenomes["GRch38"]?
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = false

    // from the pipeline ===============================================================================
    runBasecall        = true
    runTomboanno       = true
    runResquiggle      = true
    runDeepSignal      = true
    runDeepSignal2     = false
    runCallfreq        = true
    runDeepSignaleval  = false

    // Resquiggle specifications
    BasecallGroupName = "Basecall_1D_000" // Basecall ID name used by resquiggle
    BasecallSubGroupName = "BaseCalled_template"
    ResquiggleCorrectedGroup = "RawGenomeCorrected_000"
    tomboResquiggleOptions = null // or '--signal-length-range 0 500000  --sequence-length-range 0 50000' //ref:  tombo resquiggle --print-advanced-arguments
    tomboMultiprocessRegionSize = 1000 // tombo methylation calling options

    // DeepSignal model names
    deepsignalDir = null // default is get model online, or specify the name of model dir
    DEEPSIGNAL_MODEL_DIR = 'model.CpG.R9.4_1D.human_hx1.bn17.sn360.v0.1.7+'
    DEEPSIGNAL_MODEL = 'bn_17.sn_360.epoch_9.ckpt'

    // Guppy model specificatoins
    guppyDir = null // default is in PATH var
    // Suggested model by Guppy basecall
    GUPPY_BASECALL_MODEL = "dna_r9.4.1_450bps_hac_prom.cfg"
    // Suggested model by Guppy methcall
    // GUPPY_METHCALL_MODEL = 'dna_r9.4.1_450bps_modbases_5mc_hac.cfg'
    GUPPY_TIMEOUT = 300  // For CPU running for Megalodon, it may need be enlarged, or else Megalodon will be empty outputs
    READS_PER_GUPPY_BATCH = 100
    SAMTOOLS_PATH = "samtools"

    dataType = null
    chrSet = null
    cleanAnalyses = false // true if clean previous analysis in fast5 inputs, for guppy
    sort = false // true if sort read level unified outputs, for call_mods process
    deduplicate = false // true if deduplicate read-level outputs for tools, for call_mods process

    eval_methcall  = false
    bs_bedmethyl   = null  // bs bedmethyl file as standard for evaluation
    comb_strands   = true  // combine CpG methylation freq using reads aligned to both strands
    eval_fwd_only  = true  // only cmp fwd CpGs
    
    cleanup     = false // If clean work dir after complete

    outputIntermediate = false  // if keep each batch outputs
    outputRaw = true // if output the raw combined outputs for each tool's format
    // ===================================================================================

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '200.GB'
    max_cpus                   = 40
    max_time                   = '360.h'

    tracedir                   = "${params.outdir}/pipeline_info"

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
// includeConfig 'conf/modules.config'

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        process.conda = params.conda_name
        conda.cacheDir = params.conda_cache
    }
    docker {
        params {
            containerOptions = null // users using GPU need to set to "--gpus all"
        }
        process.container      = params.docker_name
        process.containerOptions = params.containerOptions // or "--gpus all" Note: this is not compatible with GitHub citest/naive docker users
        docker.envWhitelist = 'CUDA_VISIBLE_DEVICES'
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        params {
            containerOptions = "--nv"
        }
        process {
            container = params.singularity_name
            containerOptions = params.containerOptions // "--nv"
        }
        singularity.cacheDir = params.singularity_cache
        singularity.envWhitelist = 'CUDA_VISIBLE_DEVICES' // Ref: https://github.com/nextflow-io/nextflow/issues/776
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'longmethyl'
    author          = 'Peng Ni'
    homePage        = 'https://github.com/PengNi/longmethyl'
    description     = 'detecting methylation using long reads'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
